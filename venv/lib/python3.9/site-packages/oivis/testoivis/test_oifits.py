"""
Testing oifits functionalities
Jean-Philippe.Berger@univ-grenoble-alpes.fr
"""
import os as os
import numpy as np
from oivis.oifits.oifits_read import Oifits

datadir = os.path.dirname(os.path.abspath(__file__)) + "/../data/"

def oiload_and_merge():
    """
    oiload_and_merge

    Tests that oifits loads and merges correctly files
    """
    files = ["Aspro2_HD_100546_PIONIER_binary_frat_1_10_sep_7_mas_pa_30_deg.fits",
             "Aspro2_HD_100546_unifdisk_3mas_eratio1_5_pa30deg.fits"]
    filelist = [datadir + file for file in files]
    oifitsclass = Oifits(filelist)
    print("Number of data pts {0} (Should be 1740)".format(len(oifitsclass.oidata)))
    print("Number of v2 pts {0} (Should be 1044)".format(len(oifitsclass.v2data['VIS2DATA'])))
    print("Number of cp pts {0} (Should be 696)".format(len(oifitsclass.cpdata['T3PHI'])))
    return None


def oifilter():
    """
    oifilter tests the filter_oidata function

    Tested filters

    "wave_equal"

    Returns
    -------
        None

    """
    file = "Aspro2_HD_100546_PIONIER_binary_frat_1_10_sep_7_mas_pa_30_deg.fits"
    oifitsclass = Oifits([datadir + file])
    # testing filtering by wavelength
    print("%%----------------------------------------------------------------------------%%")
    print("Testing filtering by wavelength using Oifits.filter_oidata(\"wave_equal\", params)")
    print("%%----------------------------------------------------------------------------%%")
    wavetable = np.unique([oi['EFF_WAVE'] for oi in oifitsclass.oidata])
    filtereddata = oifitsclass.filter_oidata('wave_equal', [wavetable[2]])
    print("Number of v2 and cp data points: {0} (Should be 840)".format(len(oifitsclass.oidata)))
    print("Number of v2 and cp after filtering: {0} (Should be 140)".format(len(filtereddata)))
    return None