### signal to noise computation in different context
import numpy as np
from scipy import constants
from oivis.oiphot import photometry
from astropy import units as u

def blackbody_wav(wav, T):
    '''blackbody_wav [summary]

    :param wav: [description]
    :type wav: [type]
    :param T: [description]
    :type T: [type]
    :return: blackbody intensity (units W·sr−1·m−3)
    :rtype: [type]
    '''
    a = 2.0*constants.h * constants.c**2
    b = constants.h * constants.c/(wav * constants.k * T)
    intensity = a/ ( (wav**5) * (np.exp(b) - 1.0) )
    return intensity

def blackbody_freq(freq, T):
    '''blackbody_freq [summary]

    :param freq: [description]
    :type freq: [type]
    :param T: [description]
    :type T: [type]
    :return: blackbody intensity (units W·sr−1·m−2·Hz−1,)
    :rtype: [type]
    '''
    a = 2.0*constants.h * freq**3
    b = constants.h * freq/(constants.k * T)
    intensity = a/(constants.c**2) * (np.exp(b) - 1.0)
    return intensity


def danchi_dir_het_snr_ratio(wavel, temperature, efficiency):
    '''danchi_dir_het_snr_ratio Computes the ratio of direct over heterodyne
signal to noise ratio 

    :param wavel: wavelength (meters)
    :type wavel: float or array of floats
    :param temperature: temperature in Kelvin
    :type temperature: float or array of floats
    :param efficiency: efficiency transmission of optics (direct interferometry)
    :type efficiency: float
    :return: ratios of signal to noise ratios
    :rtype: float

    :Example:
        from scipy import constants
        temperature = 293
        wavel = np.linspace(1, 30, 1000) * 1e-6
        efficiency = 0.9
        snrratio = snr.danchi_dir_het_snr_ratio(wavel, temperature, efficiency)
    '''
    nu = constants.c / wavel
    A = constants.h * nu / (constants.k * temperature)
    snrratio = np.sqrt((np.exp(A) -1) / (1 - efficiency))

    return snrratio


def monnier_direct_interf_snr(target, observation):

    wav = observation['wav']
    etat = observation['etat']
    f0wav = observation['f0wav']
    diam = observation['diam']
    tcoh = observation['tcoh']
    deltawav = observation['deltawav']
    epswarm = observation['epswarm']
    ntel = observation['ntel']
    temperature = observation['temperature']
    vbase = target['vbase']
    magobj = target['mag']
    a = etat * f0wav * 10**(-magobj/2.5)
    b = vbase * ((np.pi/4)* diam **2) * np.sqrt(2 * tcoh * deltawav)
    c = np.sqrt(epswarm * ntel * blackbody_wav(wav, temperature))
    snrdir = a * b / (c * np.sqrt(wav * constants.h * constants.c))
    return snrdir


def monnier_heterodyne_interf_snr(target, observation):

    wav = observation['wav']
    etat = observation['etat']
    f0wav = observation['f0wav']
    diam = observation['diam']
    tcoh = observation['tcoh']
    deltawav = observation['deltawav']
    vbase = target['vbase']
    magobj = target['mag']
    a = etat * f0wav * 10**(-magobj/2.5)
    b = vbase * ((np.pi/4)* diam **2) * wav**2 * np.sqrt(2 * tcoh * deltawav)
    c = constants.h * constants.c**(3/2)
    snrdir = a * b / c
    return snrdir
