''' 
Outils de conversions utiles pas trouv√©s ailleurs
'''
from scipy import constants
import numpy as np

def freq_to_wavel(freq, verbose=1):
    '''freq_to_wavel(freq): conversion of frequency to wavelengths

    :param freq: frequency in Hertz
    :type freq: array of float
    :param verbose: level of verbosity
    :type verbose: boolean
    '''
    wavel = constants.c/(freq)
    if (verbose):
        print("Wavelength is {0} microns".format(wavel * 1e6))
    return wavel

def wavel_to_freq(wavel, verbose=1):
    '''wavel_to_freq(wavel) :conversion of wavelength (m) to frequency (Hz)

    :param wavel: wavelength in meters
    :type wavel: array of float
    :param verbose: level of verbosity
    :type verbose: boolean
    '''
    freq = constants.c/wavel
    if (verbose):
        print("Frequency is {0} GHz".format(freq / 1e9))
    return freq

def deltafreq_to_deltawavel(freq, deltafreq, verbose=1):
    '''deltafreq_to_deltawavel(freq, deltafreq) : converts a difference of frequency around a given frequency 
    [freq - deltafreq/2, freq + deltafreq/2] into the corresponding wavelength difference. 

    :param freq: central frequency (Hz)
    :type freq: float
    :param deltafreq: frequency difference (Hz)
    :type deltafreq: float
    :param verbose: level of verbosity
    :type verbose: boolean
    :return: [wavelmin, wavelmax, wavelcenter, deltawavel]
    :rtype: [float, float, float, float]
    '''
    freqmin = freq - deltafreq/2
    freqmax = freq + deltafreq/2
    wavelmin, wavelmax = constants.c / freqmax, constants.c / freqmin
    wavelcenter =  (wavelmin + wavelmax)/2
    deltawavel = wavelmax - wavelmin
    if (verbose):
        print("Min frequency {0} Hz \nMax. frequency {1} Hz \n".format(freqmin * 1e-9, freqmax*1e-9))
        print("Central wavelength {0} microns\n".format(wavelcenter * 1e6))
        print("Max. wavelength {0} microns \nMin. wavelength {1} microns \nDelta. wavel {2} micron \n".format(wavelmax * 1e6, wavelmin * 1e6, deltawavel * 1e6))
    return [wavelmin, wavelmax, wavelcenter, deltawavel]

def deltawavel_to_deltafreq(wavel, deltawavel, verbose=1):
    '''deltawavel_to_deltafreq : converts a difference of wavelength around a given wavelength
    [wavel- deltawavel/2, wavel + deltawavel/2] into the corresponding frequency difference
    :param wavel: wavelength (meter)
    :type wavel: float
    :param deltawavel: wavelength difference (meter)
    :type deltawavel: float
    :param verbose: level of verbosity
    :type verbose: boolean
    :return: [freqmin, freqmax, freqcenter, deltafreq]
    :rtype: [float, float, float, float]
    '''
    wavelmin = wavel - deltawavel/2
    wavelmax = wavel + deltawavel/2
    freqmin, freqmax = constants.c/(wavel + deltawavel/2), constants.c/(wavel - deltawavel/2)
    freqcenter =  (freqmin + freqmax)/2
    deltafreq = freqmax - freqmin
    if (verbose):
        print("Min wavelength {0} microns \nMax. wavelength {1} microns \n".format(wavelmin * 1e6, wavelmax*1e6))
        print("Central frequency {0} GHz\n".format(freqcenter * 1e-9))
        print("Max. frequency {0} GHz \nMin. frequency {1} GHz \nDelta. freq {2} GHz \n".format(freqmax / 1e9, freqmin / 1e9, deltafreq / 1e9))
    return [freqmin, freqmax, freqcenter, deltafreq]

def print_filter_freq_table():
    '''print_filter_freq_table prints astronomical filters table in frequency
    '''
    filtername = ["U","B","V","R","I","J","H","K","L","M","N","Q"]
    effwavel = np.array([365e-9, 445e-9, 551e-9, 658e-9,806e-9,
        1220e-9,1630e-9,2190e-9,3450e-9,4750e-9, 10500e-9, 21000e-9])
    filtfwhm = np.array([66,94,88,138,149,213,307,390,472,460,2500,5800,])*1e-9
    for i,filt in enumerate(filtername):
        freq = wavel_to_freq(effwavel[i], verbose=0)
        deltafreq = deltawavel_to_deltafreq(effwavel[i], filtfwhm[i], verbose=0)
        print("|Filter {0} | Wavelength {1} nm | FWHM {2:4.4} nm | Frequency {3:4.4} THz | Delta Freq {4:4.4} THz|".format(
            filt, effwavel[i]*1e9, filtfwhm[i]*1e9, freq*1e-12, deltafreq[3]*1e-12))



