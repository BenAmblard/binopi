### routines pour calculer des photometries et spectres
### photometry and fluxes conversions validated against 
### http://slittlefair.staff.shef.ac.uk/teaching/phy217/lectures/principles/L04/index.html

import os
from astropy.io import ascii
import numpy as np
from scipy import constants
# TODO correct the lameff vs. weff error in get_filterdata and print_all_filter data

datadir = os.path.dirname(os.path.abspath(__file__)) + "/../data/"
specdir = os.path.dirname(os.path.abspath(__file__)) + "/../data/VosaFilters/"

def print_all_filter_data():
    '''print_all_filter_data Prints all the stored VOSA basic filter data
    '''
    datafilt = ascii.read(datadir + 'vosafilterlist.txt')
    for data in datafilt:
        print('Name: {0} Eff. Wavel {1:.2} Width {2:.2} Zp (W.m-2.nm) {3:.2}'.format(
                data['Filter_ID'], data['lameff'] * 1e-4, 
                data['Weff'], data['ZP(Jy)']*1e-26 * constants.c 
                * data['Weff']**2 * 1e-9))

def get_filter_data(filterlist, verbose=False):
    '''get_filter_data(filterlist) 
    Extracts the vosa filter information and data and returns an array of
    dictionaries containing Name, Effective wavelength.

    :param filterlist: Array of vosa filters names as contained in vosafilterlist 
    :type filterlist: List of strings
    :param verbose: False/True print filter information
    :type verbose: Boolean

    :return: List of dictionaries with the following elements
        name: Filter name 
        waveff: Filter effective wavelength (Angstroms) 
        width: Filter width (Angstroms) 
        zp_jy : Zero point (Jy) 
        zp_freq: Zero point (W.m-2.Hz-1)
        zp_lam: Zero point (W.m-2.nm-1)
        zp_erg: Zero point (erg.s-1.)
        wavel : np.array of filter transmission (meter)
        trans : filter transmission 
    :rtype: List of dictionaries
    
    :Example:
        filterlist = ['OAF/Bessell.U','OAF/Bessell.V','2MASS/2MASS.H',
        '2MASS/2MASS.J', '2MASS/2MASS.Ks']
        filterdata = get_filter_data(filterlist)
        plt.figure(1)
        ax = plt.subplot(111)
        ax.plot(filterdata[0]['wavel'] / 10000., filterdata[0]['trans'])
        ax.text(np.min(filterdata[0]['wavel']) / 10000., 0.8*np.max(filterdata[0]['trans']), filterdata[0]['name'])
    '''
    filterdata = []
    datafilt = ascii.read(datadir + 'vosafilterlist.txt')
    filternames = datafilt['Filter_ID']
    filterlameff = datafilt['lameff']
    filterzp = datafilt['ZP(Jy)']
    filterwidth = datafilt['Weff']
    for filt in filterlist:
        filtdat = {'name': [], 'waveff': [], 'width': [], 'zp_jy': [],
                   'zp_wav': [], 'zp_freq': [], 'zp_erg': [],'wavel': [], 'trans': []}
        filterindex = np.where(filternames == filt)[0][0]
        waveff = filterlameff[filterindex]
        zpfluxjy = filterzp[filterindex]  # en Jansky
        width = filterwidth[filterindex]  # Angstrom
        zpflux = zpfluxjy
        # conversion from Jansky to erg.s-1.cm-2.Angstrom^-1
        # zpflux = zpfluxjy * c / lameff**2 * 10**23
        transmissionfile = filt.split('/')[0]+'_'+filt.split('/')[1]+'.dat'
        #print('Loading file {0}').format(transmissionfile)
        datatrans = ascii.read(specdir + transmissionfile)
        wavelf = datatrans['col1']
        transf = datatrans['col2']
        filtdat['name'] = filt
        filtdat['waveff'] = waveff * 1e-10 # from angstrom to meters
        filtdat['width'] = width * 1e-10 # from angstrom to meters
        filtdat['zp_jy'] = zpflux
        filtdat['zp_freq'] = zpflux * 1e-26 # W.m-2.Hz-1
        filtdat['zp_erg'] = zpflux * 1e-23 # erg.s-1.cm-2.Hz-1
        filtdat['zp_wav'] = zpflux * 1e-26 * constants.c / waveff**2 * 1e11 # W.m-2.nm
        filtdat['wavel'] = wavelf * 1e-10
        filtdat['trans'] = transf
        if (verbose):
            print('Name: {0} Eff. Wavel {1:.2} Width {2:.2} Zp (W.m-2.nm-1) {3:.2}'.format(
                filtdat['name'], filtdat['waveff'], filtdat['width'], filtdat['zp_wav']
            ))
        filterdata.append(filtdat)
        
    return filterdata


def mag_to_nphot(filterlist, magarr):
    '''mag_to_nphot(filterlist, magarr)
    Conversion of magnitudes to number of photons per square meter
    for a given filter
    
    :param filterlist: filter list folowing vosafilter nomenclature
    :type filterlist: list of strings
    :param magarr: magnitudes to be converted
    :type magarr: array of float
    :return: number of photons per square meter over filter width
    :rtype: array of float

    :Example:
    filterlist = ['OAF/Bessell.U','OAF/Bessell.V','2MASS/2MASS.H',
    '2MASS/2MASS.J', '2MASS/2MASS.Ks']
    magarr = np.array([0,0,0,0,0])
    mag_to_nphot(filterlist, magarr )
    '''    
    magarr = np.array(magarr)
    filterdata = get_filter_data(filterlist)
    zparr = np.array([fil['zp_jy'] for fil in filterdata])
    print("Converting magnitudes in fluxes (Jansky)")
    fluxjy = zparr*10**(-magarr/2.5)
    photonflux = flux_to_nphot(filterlist, fluxjy)
    return photonflux


def flux_to_nphot(filterlist, fluxarr):
    '''flux_to_nphot(filterlist, fluxarr)
    Conversion of fluxes (Jy) in photon flux

    :param filterlist: filter list folowing vosafilter nomenclature
    :type filterlist: list of strings
    :param fluxarr: fluxes for each list (in Jansky)
    :type fluxarr: np.array of float
    :return: Number of photons per sec per square meter for each filter
    :rtype: np.array of float
    '''    
    filterdata = get_filter_data(filterlist)
    nmeas = len(filterdata)  # number of measurements to convert
    wavel = np.array([])
    wavelwid = np.array([])
    for i in range(nmeas):
        # effective wavelength in angstrom
        wavelwid = np.append(wavelwid, filterdata[i]['width'])
        # filter width in angstrom
        wavel = np.append(wavel, filterdata[i]['waveff'])
    # recall nphotons is by sec-1/m-2
    photonflux = fluxarr * 1.51e7 * wavelwid / wavel
    print("Converting fluxes (Jansky) in flux of photons in unit of photons.s-1.m-2")
    return photonflux


def jy_to_ergfreq(flux, wavel=0):
    '''jy_to_ergfreq converts jansky to erg.s-1.m-2.Hz-1
    
    :param flux: flux in Jansky
    :type flux: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of erg.s-1.m-2.Hz-1")
    return flux * 1e-23

def ergfreq_to_jy(flux, wavel=0):
    '''ergfreq_to_jy converts erg.s-1.m-2.Hz-1 to jansky
    
    :param flux: flux in erg.s-1.m-2.Hz-1
    :type flux: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of Jansky")
    return flux * 1e23

def jy_to_wattfreq(flux, wavel=0):
    '''jy_to_wattfreq converts jansky to W.m-2.Hz-1
    
    :param flux: flux in Jansky
    :type flux: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of W.m-2.Hz-1")
    return flux * 1e-26

def wattfreq_to_jy(flux, wavel=0):
    '''wattfreq_to_jy converts W.m-2.Hz-1 to Jansky
    
    :param flux: flux in W.m-2.Hz-1
    :type flux: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of Jansky")
    return flux * 1e26

def jy_to_wattwav(flux, wavel=1e-20):
    '''jy_to_wattwav converts  Jansky to W.m-2.nm-1
    
    :param flux: flux in Jansky
    :type flux: np.array of floats

    :param wavel: wavelengths in meters
    :type wavel: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of W.m-2.nm-1")
    return flux * 1e-26 * constants.c / wavel**2 * 1e-9

def wattfreq_to_wattwav(flux, wavel=1e-20):
    '''wattfreq_to_wattwav converts  fluxes from W.m-2.Hz-1 to W.m-2.nm-1
    
    :param flux: flux in W.m-2.Hz-1
    :type flux: np.array of floats

    :param wavel: wavelengths in meters
    :type wavel: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of W.m-2.nm-1")
    return flux * constants.c / wavel**2 * 1e-9

def wattwav_to_wattfreq(flux, wavel=1e-20):
    '''wattwav_to_wattfreq converts  fluxes from W.m-2.nm-1 to W.m-2.Hz-1
    
    :param flux: flux in W.m-2.nm-1
    :type flux: np.array of floats

    :param wavel: wavelengths in meters
    :type wavel: np.array of floats

    :return: converted fluxes
    :rtype: array of floats
    '''    
    print("Flux converted in units of W.m-2.Hz-1")
    return flux / (constants.c / wavel**2 * 1e-9)