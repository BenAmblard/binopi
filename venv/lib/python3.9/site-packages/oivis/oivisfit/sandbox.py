
from oivis.oivisfit import fitfunctions
from oivis.oivisfit import fitutils
import os
from scipy import constants
import importlib
from oivis.oifits.oifits_read import Oifits
import numpy as np

datadir = os.path.dirname(os.path.abspath(".")) + "/oivis/data/"
print(datadir)
importlib.reload(fitfunctions)
importlib.reload(fitutils)

# HD 100546 parameters
# HD 100546 parameters
params = {
'vis_gaussian;1:FLUX': 0.11,
'vis_gaussian;1:SPI': 2.0,
'vis_gaussian;1:OFX': 0.0 * constants.arcsecond / (1000),
'vis_gaussian;1:OFY': 0.0 * constants.arcsecond / (1000),
'vis_gaussian;1:POSANG': 0.0 / 180. *np.pi,
'vis_gaussian;1:FWHM': 2000 * constants.arcsecond / (1000),
'vis_gaussian;1:ERATIO': 0.0,
'vis_point_source;1:FLUX':0.55,
'vis_point_source;1:SPI':2.0,
'vis_point_source;1:OFX':0.0 * constants.arcsecond / (1000),
'vis_point_source;1:OFY':0.0 * constants.arcsecond / (1000),
'vis_modulated_ring;1:POSANG': 2.66,
'vis_modulated_ring;1:FLUX': 0.34,
'vis_modulated_ring;1:SPI': 0.0,   
'vis_modulated_ring;1:OFX': 0.0 * constants.arcsecond / (1000),
'vis_modulated_ring;1:OFY': 0.0 * constants.arcsecond / (1000),
'vis_modulated_ring;1:RADIUS': 3.36 * constants.arcsecond / (1000),
'vis_modulated_ring;1:RINGRADIUS': 2.25 * constants.arcsecond / (1000),
'vis_modulated_ring;1:ERATIO': 0.69,
'vis_modulated_ring;1:FLOR': 1.0,
'vis_modulated_ring;1:MOD': 1.0,
'vis_modulated_ring;1:CM': [0.1],
'vis_modulated_ring;1:SM': [-0.1]
}

# Defining observation parameters
# Reading oifits aspro data to generate realistic uvcoverage
waveref = 1.65e-6 # microns
oifile = "Aspro2_HD_100546_PIONIER_1_533-1_772-6ch_A0-G1-J2-J1.fits"
datafile = datadir + oifile
oidata = Oifits([datafile])
u1coord = oidata.cpdata['U1COORD']
v1coord = oidata.cpdata['V1COORD']
u2coord = oidata.cpdata['U2COORD']
v2coord = oidata.cpdata['V2COORD']
wavel = oidata.cpdata['EFF_WAVE']
mjd = oidata.cpdata['MJD']
y = np.array([u1coord, v1coord, u2coord, v2coord, wavel, waveref])

# expected cp with the uv coverage
# expected cp with the uv coverage
cp = fitfunctions.compute_closure_phase(y, 'combine_functions', params)
# removing star to show the image
params['vis_point_source;1:FLUX'] = 0.0
visgrid = fitutils.vis_grid(1000, 100, waveref, params, combine_functions)
image = visgrid['IMAGE']