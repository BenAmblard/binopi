### computing all kind of interferograms
import numpy as np

def opd_scan(nsample, sigma, scanlength, zerophase, photometry):
    '''opd_scan(nsample, wavel, scanlength, zerophase)
    Computes an temporally encoded Michelson-type interferogram 
    of length scanlength for each wavelength of array wavel with 
    a number of samples nsample. Each wavelength can possess a reference phase
    offset zerophase
    
    :param nsample: Number of sampled points in the interferogram
    :type nsample: integer
    :param sigma: Array of wavenumbers (in meters**-1)
    :type sigma: np.array of floats
    :param scanlength: Length of scan (in meters**-1)
    :type scanlength: float
    :param zerophase: reference phase for each wavelength (default 0)
    :type zerophase: np.array of floats same dim as wavel
    :param photometry: photometry for each beam and each sample
    :type photometry: [nsample 1D array, nsample 1D array]
    :return: interfmono, wavel, xscan (the position for each sample)
    :rtype: np.array(dimwavel, nsample), array of float, array of float

    :Example:

        wavelmin = 1.55e-6
        wavelmax = 1.75e-6
        sigma = np.linspace(1/wavelmax, 1/wavelmin,5)
        nsample = 1024
        scanlength = 20e-6
        zerophase = 0

        interf, sigma, xscan = interferogram.opd_scan(nsample, sigma, scanlength, zerophase) 
    '''   
    xscan = np.linspace(-scanlength/2, scanlength/2, nsample) + 1e-12
    deltasigma = np.diff(sigma)[0]
    envelope = np.sin(2 * np.pi * deltasigma * xscan / 2) / (2 * np.pi * deltasigma * xscan / 2)
    expsigma = np.expand_dims(sigma, axis=1)
    expphase = np.expand_dims(zerophase, axis=1)
    expxscan = np.expand_dims(xscan, axis=0)
    expenvel = np.expand_dims(envelope, axis=0)
    uncorrelatedflux = photometry[0] + photometry[1]
    correlatedflux = 2*np.sqrt(photometry[0] * photometry[1])
    interfmono = (uncorrelatedflux + correlatedflux * np.cos(2*np.pi * expxscan * expsigma + expphase) * expenvel)
    return interfmono, sigma, xscan
