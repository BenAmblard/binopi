"""
_loadfile(filename):
Private function.
Returns a list of all observing blocks contained in oidata class.
Tuned for PIONIER oifits
"""
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from astropy.io import fits as pif
import matplotlib.colors as colors
import os
import glob as glob
import logging
import sys
import time

# logging configuration
LOGLEVEL = "INFO"
logger = logging.getLogger(__name__)
logger.setLevel(LOGLEVEL)

def _extract_weather_conditions(hdu):
    '''
    seeing, tau0, windspeed = _extract_weather_conditions(self, hdu)
    '''
    if hdu.header['ORIGIN'][0:3] == 'ESO':
        try:
            fwhme= hdu.header['HIERARCH ESO ISS AMBI FWHM END']
            fwhms= hdu.header['HIERARCH ESO ISS AMBI FWHM START']
            seeing = (fwhme + fwhms) / 2
            tau0e= hdu.header['HIERARCH ESO ISS AMBI TAU0 END']
            tau0s= hdu.header['HIERARCH ESO ISS AMBI TAU0 START']
            tau0 = (tau0s + tau0e) / 2
            windspeed = hdu.header['HIERARCH ESO ISS AMBI WINDSP']
        except:
            self.logger.warning("No ESO ISS weather information")
            seeing = tau0 = windspeed = 0.0
    else:
        logger.warning('Non ESO instrument. No weather information')
        seeing = tau0 = windspeed = 0.0
    return seeing, tau0, windspeed

filename = "/Users/bergejea/Software/tihpy/oivis/oifits/GRAVITY_PARALLEL_OBS281_0005_singlescivis.fits"
updated = time.asctime()
hdulist = pif.open(filename)
oiwavelength = {}
measure = []

hduvis = hdulist[11]

hduarray = hdulist[1]
hdutarget = hdulist[2]
hduwave = hdulist[3]

# loading target info
datatarget = hdutarget.data
datacontent = [[dat['TARGET'], dat['RAEP0'],
                                    dat['DECEP0'], dat['EQUINOX']] for dat
                                   in datatarget]
oitarget = dict(zip(datatarget['TARGET_ID'], datacontent))
numtarget = len(datacontent)

#loading array info
dataarray = hduarray.data
datacontent = [[dat['TEL_NAME'], dat['STA_NAME'],
                 dat['DIAMETER']] for dat in dataarray]
oiarray = dict(zip(dataarray['STA_INDEX'], datacontent))

# wavelength info
datawav = hduwave.data
datacontent = [datawav[name] for name in datawav.names]
oiwavelength[hduwave.header['INSNAME']] = datacontent


""" nmeas = hduvis.header['NAXIS2']
measurement = {key:"" for key in hduvis.datanames}
for i in np.range(nmeas):
    for key in measurement.keys:
        measurement[key]= """